import "./chunk-RSJERJUL.js";

// node_modules/@thi.ng/checks/has-wasm.js
var hasWASM = () => typeof window !== "undefined" && typeof window["WebAssembly"] !== "undefined" || typeof global !== "undefined" && typeof global["WebAssembly"] !== "undefined";

// node_modules/@thi.ng/errors/deferror.js
var defError = (prefix, suffix = (msg) => msg !== void 0 ? ": " + msg : "") => class extends Error {
  constructor(msg) {
    super(prefix(msg) + suffix(msg));
  }
};

// node_modules/@thi.ng/errors/unsupported.js
var UnsupportedOperationError = defError(() => "unsupported operation");
var unsupported = (msg) => {
  throw new UnsupportedOperationError(msg);
};

// node_modules/@thi.ng/transducers/compr.js
var compR = (rfn, fn) => [rfn[0], rfn[1], fn];

// node_modules/@thi.ng/api/api.js
var SEMAPHORE = Symbol();
var NO_OP = () => {
};

// node_modules/@thi.ng/checks/implements-function.js
var implementsFunction = (x, fn) => x != null && typeof x[fn] === "function";

// node_modules/@thi.ng/transducers/ensure.js
var ensureTransducer = (x) => implementsFunction(x, "xform") ? x.xform() : x;

// node_modules/@thi.ng/errors/illegal-arity.js
var IllegalArityError = defError(() => "illegal arity");

// node_modules/@thi.ng/transducers/reduced.js
var Reduced = class {
  constructor(val) {
    this.value = val;
  }
  deref() {
    return this.value;
  }
};
var reduced = (x) => new Reduced(x);
var isReduced = (x) => x instanceof Reduced;
var unreduced = (x) => x instanceof Reduced ? x.deref() : x;

// node_modules/@thi.ng/transducers/iterator.js
function* iterator1(xform, xs) {
  const reduce = ensureTransducer(xform)([NO_OP, NO_OP, (_, x) => x])[2];
  for (let x of xs) {
    let y = reduce(SEMAPHORE, x);
    if (isReduced(y)) {
      y = unreduced(y.deref());
      if (y !== SEMAPHORE) {
        yield y;
      }
      return;
    }
    if (y !== SEMAPHORE) {
      yield y;
    }
  }
}

// node_modules/@thi.ng/transducers-binary/base64.js
var B64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var B64_SAFE = B64_CHARS.substring(0, 62) + "-_";
function base64Decode(src) {
  return src ? new Uint8Array([...iterator1(base64Decode(), src)]) : (rfn) => {
    const r = rfn[2];
    let bc = 0, bs = 0;
    return compR(rfn, (acc, x) => {
      switch (x) {
        case "-":
          x = "+";
          break;
        case "_":
          x = "/";
          break;
        case "=":
          return reduced(acc);
        default:
      }
      const y = B64_CHARS.indexOf(x);
      bs = bc & 3 ? (bs << 6) + y : y;
      if (bc++ & 3) {
        acc = r(acc, 255 & bs >> (-2 * bc & 6));
      }
      return acc;
    });
  };
}

// node_modules/@thi.ng/leb128/binary.js
var BINARY = "AGFzbQEAAAABCgJgAX4Bf2AAAX4DBQQAAQABBQMBABEGCQF/AEGAgMAACwdYBgZtZW1vcnkCAA9sZWIxMjhFbmNvZGVVNjQAAANidWYDAA9sZWIxMjhEZWNvZGVVNjQAAQ9sZWIxMjhFbmNvZGVJNjQAAg9sZWIxMjhEZWNvZGVJNjQAAwrBAwRbAQJ/AkAgAEKAAVoEQANAIAFBgIBAayAAp0H/AHEgAEL/AFZBB3RyOgAAIAFBAWohASAAQoABVCAAQgeIIQBFDQALDAELQYCAwAAgADwAAEEBIQELIAFB/wFxC1ECA38CfgNAAkAgAEEBaiECIABBgIBAaywAACIBQf8Aca0gA4YgBIQhBCABQQBODQAgA0IHfCEDIABBCUkgAiEADQELC0GAgMAAIAI6AAAgBAuRAQEDfwJAIABCQH1CgAFaBEBBASECA0AgAkEBcUUNAiABQYCAQGtBAEGAfyAApyICQcAAcSIDRSAAQoABVHEgA0EGdiAAQgeHIgBCf1FxciIDGyACQf8AcXI6AAAgA0UhAiABQQFqIQEMAAsAC0GAgMAAIABCOYinQcAAcSAAp0E/cXI6AABBASEBCyABQf8BcQt+AgN/A35BfyEAA0ACQCAAQQFqIQEgA0IHfCEFIABBgYDAAGotAAAiAEH/AHGtIAOGIASEIQQgAMAiAkEATg0AIAEhACAFIQMgAUEJSQ0BCwtBgIDAACABQQFqOgAAIARCfyAFhkIAIAJBwABxQQZ2G0IAIAFB/wFxQQlJG4QL";

// node_modules/@thi.ng/leb128/index.js
var wasm;
var U8;
if (hasWASM()) {
  const inst = new WebAssembly.Instance(new WebAssembly.Module(base64Decode(BINARY)));
  wasm = inst.exports;
  U8 = new Uint8Array(wasm.memory.buffer, wasm.buf, 16);
}
var ensureWASM = () => !wasm && unsupported("WASM module unavailable");
var encode = (op, signed) => (x) => {
  ensureWASM();
  const value = signed ? BigInt.asIntN(64, BigInt(x)) : BigInt.asUintN(64, BigInt(x));
  return U8.slice(0, wasm[op](value));
};
var decode = (op, signed) => (src, idx = 0) => {
  ensureWASM();
  U8.set(src.subarray(idx, Math.min(idx + 10, src.length)), 0);
  const value = wasm[op](0, 0);
  return [
    signed ? BigInt.asIntN(64, value) : BigInt.asUintN(64, value),
    U8[0]
  ];
};
var encodeSLEB128 = encode("leb128EncodeI64", true);
var decodeSLEB128 = decode("leb128DecodeI64", true);
var encodeULEB128 = encode("leb128EncodeU64", false);
var decodeULEB128 = decode("leb128DecodeU64", false);
export {
  decodeSLEB128,
  decodeULEB128,
  encodeSLEB128,
  encodeULEB128
};
//# sourceMappingURL=@thi__ng_leb128.js.map
