import { Buffer } from 'buffer/';
import { AttributesKeys, Network, CryptographicParameters } from './types';
/**
 * Class for Hierarchical Deterministic key derivation for Concordium identities and accounts.
 */
export declare class ConcordiumHdWallet {
    private seedAsHex;
    private network;
    static fromSeedPhrase(seedPhrase: string, network: Network): ConcordiumHdWallet;
    static fromHex(seedAsHex: string, network: Network): ConcordiumHdWallet;
    private constructor();
    getAccountSigningKey(identityProviderIndex: number, identityIndex: number, credentialCounter: number): Buffer;
    getAccountPublicKey(identityProviderIndex: number, identityIndex: number, credentialCounter: number): Buffer;
    getCredentialId(identityProviderIndex: number, identityIndex: number, credentialCounter: number, { onChainCommitmentKey, }: Pick<CryptographicParameters, 'onChainCommitmentKey'>): Buffer;
    getPrfKey(identityProviderIndex: number, identityIndex: number): Buffer;
    getIdCredSec(identityProviderIndex: number, identityIndex: number): Buffer;
    getSignatureBlindingRandomness(identityProviderIndex: number, identityIndex: number): Buffer;
    getAttributeCommitmentRandomness(identityProviderIndex: number, identityIndex: number, credentialCounter: number, attribute: AttributesKeys): Buffer;
}
