/// <reference types="node" />
import { Buffer } from 'buffer/';
import { AccountTransactionType, InitContractPayload, SimpleTransferPayload, SimpleTransferWithMemoPayload, DeployModulePayload, UpdateContractPayload, AccountTransactionPayload, UpdateCredentialsPayload, RegisterDataPayload, ConfigureDelegationPayload } from './types';
import { Readable } from 'stream';
interface AccountTransactionHandler<PayloadType extends AccountTransactionPayload = AccountTransactionPayload> {
    serialize: (payload: PayloadType) => Buffer;
    deserialize: (serializedPayload: Readable) => PayloadType;
    getBaseEnergyCost: (payload: PayloadType) => bigint;
}
export declare class SimpleTransferHandler implements AccountTransactionHandler<SimpleTransferPayload> {
    getBaseEnergyCost(): bigint;
    serialize(transfer: SimpleTransferPayload): Buffer;
    deserialize(serializedPayload: Readable): SimpleTransferPayload;
}
export declare class SimpleTransferWithMemoHandler extends SimpleTransferHandler implements AccountTransactionHandler<SimpleTransferWithMemoPayload> {
    serialize(transfer: SimpleTransferWithMemoPayload): Buffer;
    deserialize(serializedPayload: Readable): SimpleTransferWithMemoPayload;
}
export declare class DeployModuleHandler implements AccountTransactionHandler<DeployModulePayload> {
    getBaseEnergyCost(payload: DeployModulePayload): bigint;
    serialize(payload: DeployModulePayload): Buffer;
    deserialize(): DeployModulePayload;
}
export declare class InitContractHandler implements AccountTransactionHandler<InitContractPayload> {
    getBaseEnergyCost(payload: InitContractPayload): bigint;
    serialize(payload: InitContractPayload): Buffer;
    deserialize(): InitContractPayload;
}
export declare class UpdateContractHandler implements AccountTransactionHandler<UpdateContractPayload> {
    getBaseEnergyCost(payload: UpdateContractPayload): bigint;
    serialize(payload: UpdateContractPayload): Buffer;
    deserialize(): UpdateContractPayload;
}
export declare class UpdateCredentialsHandler implements AccountTransactionHandler<UpdateCredentialsPayload> {
    getBaseEnergyCost(updateCredentials: UpdateCredentialsPayload): bigint;
    serialize(updateCredentials: UpdateCredentialsPayload): Buffer;
    deserialize(): UpdateCredentialsPayload;
}
export declare class RegisterDataHandler implements AccountTransactionHandler<RegisterDataPayload> {
    getBaseEnergyCost(): bigint;
    serialize(payload: RegisterDataPayload): Buffer;
    deserialize(serializedPayload: Readable): RegisterDataPayload;
}
export declare class ConfigureDelegationHandler implements AccountTransactionHandler<ConfigureDelegationPayload> {
    getBaseEnergyCost(): bigint;
    serialize(payload: ConfigureDelegationPayload): Buffer;
    deserialize(): ConfigureDelegationPayload;
}
export declare function getAccountTransactionHandler(type: AccountTransactionType): AccountTransactionHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.Transfer): SimpleTransferHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.TransferWithMemo): SimpleTransferWithMemoHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.UpdateCredentials): UpdateCredentialsHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.DeployModule): DeployModuleHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.InitContract): InitContractHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.Update): UpdateContractHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.RegisterData): RegisterDataHandler;
export declare function getAccountTransactionHandler(type: AccountTransactionType.ConfigureDelegation): ConfigureDelegationHandler;
export {};
