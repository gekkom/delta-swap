import { Buffer } from 'buffer/';
import { AccountTransaction, AccountTransactionSignature, BlockItemKind, TypedCredentialDeployment } from './types';
/**
 * Given a contract's raw state, its name and its schema, return the state as a JSON object.
 * The return type is any, and the actual type should be determined by using the schema.
 */
export declare function deserializeContractState(contractName: string, schema: Buffer, state: Buffer): any;
export declare type BlockItem = {
    kind: BlockItemKind.AccountTransactionKind;
    transaction: {
        accountTransaction: AccountTransaction;
        signatures: AccountTransactionSignature;
    };
} | {
    kind: BlockItemKind.CredentialDeploymentKind;
    transaction: {
        credential: TypedCredentialDeployment;
        expiry: number;
    };
};
/**
 * Deserializes a transaction, from the binary format used to send it to the node, back into an js object.
 * @param serializedTransaction A buffer containing the binary transaction. It is expected to start with the version and blockItemKind.
 * @returns An object specifiying the blockItemKind that the transaction has. The object also contains the actual transaction under the transaction field.
 **/
export declare function deserializeTransaction(serializedTransaction: Buffer): BlockItem;
/**
 * Deserializes a receive functions's return value from a sequence of bytes into a json object.
 * @param returnValueBytes A buffer containing the return value as raw bytes.
 * @param moduleSchema The raw module schema as a buffer.
 * @param contractName The name of the contract where the receive function is located.
 * @param functionName The name of the receive function which return value you want to deserialize.
 * @param schemaVersion The schema version as a number. This parameter is optional,
 * if you provide a serialized versioned schema this argument won't be needed.
 */
export declare function deserializeReceiveReturnValue(returnValueBytes: Buffer, moduleSchema: Buffer, contractName: string, functionName: string, schemaVersion?: number): any;
/**
 * Deserializes a receive function's error from a sequence of bytes into a json object.
 * @param errorBytes A buffer containing the error as raw bytes.
 * @param moduleSchema The raw module schema as a buffer.
 * @param contractName The name of the contract where the receive function is located.
 * @param functionName The name of the receive function which error you want to deserialize.
 */
export declare function deserializeReceiveError(errorBytes: Buffer, moduleSchema: Buffer, contractName: string, functionName: string): any;
/**
 * Deserializes an init function's error from a sequence of bytes into a json object.
 * @param returnValueBytes A buffer containing the error as raw bytes.
 * @param moduleSchema The raw module schema as a buffer.
 * @param contractName The name of the init function which error you want to deserialize.
 */
export declare function deserializeInitError(errorBytes: Buffer, moduleSchema: Buffer, contractName: string): any;
