import { AttributeKey, CryptographicParameters, IdentityObjectV1, Network, Versioned } from '.';
export declare enum StatementTypes {
    RevealAttribute = "RevealAttribute",
    AttributeInSet = "AttributeInSet",
    AttributeNotInSet = "AttributeNotInSet",
    AttributeInRange = "AttributeInRange"
}
export declare type RevealStatement = {
    type: StatementTypes.RevealAttribute;
    attributeTag: AttributeKey;
};
export declare type MembershipStatement = {
    type: StatementTypes.AttributeInSet;
    attributeTag: AttributeKey;
    set: string[];
};
export declare type NonMembershipStatement = {
    type: StatementTypes.AttributeNotInSet;
    attributeTag: AttributeKey;
    set: string[];
};
export declare type RangeStatement = {
    type: StatementTypes.AttributeInRange;
    attributeTag: AttributeKey;
    lower: string;
    upper: string;
};
export declare type AtomicStatement = RevealStatement | MembershipStatement | NonMembershipStatement | RangeStatement;
export declare type IdStatement = AtomicStatement[];
export declare type IdProofInput = {
    idObject: IdentityObjectV1;
    globalContext: CryptographicParameters;
    seedAsHex: string;
    net: Network;
    identityProviderIndex: number;
    identityIndex: number;
    credNumber: number;
    statement: IdStatement;
    challenge: string;
};
export declare type RevealProof = {
    type: StatementTypes.RevealAttribute;
    proof: string;
    attribute: string;
};
export declare type GenericAtomicProof = {
    type: Exclude<StatementTypes, StatementTypes.RevealAttribute>;
    proof: string;
};
export declare type AtomicProof = RevealProof | GenericAtomicProof;
export declare type IdProof = {
    proofs: AtomicProof[];
};
export declare type IdProofOutput = {
    credential: string;
    proof: Versioned<IdProof>;
};
/**
 * The attributes that can be used for range statements
 */
export declare const attributesWithRange: AttributeKey[];
/**
 * The attributes that can be used for (non)membership statements
 */
export declare const attributesWithSet: AttributeKey[];
