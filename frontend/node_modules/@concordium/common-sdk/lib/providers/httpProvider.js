"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpProvider = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const json_bigint_1 = __importDefault(require("json-bigint"));
const uuid_1 = require("uuid");
class HttpProvider {
    /**
     * @param internalFetch Fetch function that performs the request. Defaults to using the cross-fetch package.
     */
    constructor(url, internalFetch = cross_fetch_1.default, onSetCookie, initialCookie, autoUpdateCookie = true) {
        this.cookie = initialCookie;
        this.request = async function (method, params) {
            const request = {
                method: method,
                params: params,
                id: (0, uuid_1.v4)(),
                jsonrpc: '2.0',
            };
            const options = {
                method: 'POST',
                // Use JSONBig in order ensure bigints are automatically parsed (as numbers)
                body: json_bigint_1.default.stringify(request),
                headers: {
                    'Content-Type': 'application/json',
                    ...(this.cookie && { cookie: this.cookie }),
                },
            };
            const res = await internalFetch(url, options);
            if (res.status >= 400) {
                const json = await res.json();
                if (json.error) {
                    throw new Error(`${json.error.code}: ${json.error.message} (id: ${json.id})`);
                }
                else {
                    throw new Error(`${res.status}: ${res.statusText} (id: ${json.id})`);
                }
            }
            const setCookieValue = res.headers.get('set-cookie');
            if (setCookieValue) {
                onSetCookie?.(setCookieValue);
                if (autoUpdateCookie) {
                    this.updateCookie(setCookieValue);
                }
            }
            return res.text();
        };
    }
    updateCookie(newCookie) {
        this.cookie = newCookie;
    }
}
exports.HttpProvider = HttpProvider;
