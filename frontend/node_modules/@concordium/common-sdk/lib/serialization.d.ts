import { Buffer } from 'buffer/';
import { AccountTransaction, AccountTransactionSignature, UnsignedCredentialDeploymentInformation, CredentialDeploymentInfo, SchemaVersion, CredentialDeploymentDetails, SignedCredentialDeploymentDetails } from './types';
import { AccountAddress } from './types/accountAddress';
/**
 * Serializes a map of account transaction signatures. If no signatures are provided,
 * then an error is thrown.
 */
export declare function serializeAccountTransactionSignature(signatures: AccountTransactionSignature): Buffer;
/**
 * Serializes a transaction and its signatures. This serialization when sha256 hashed
 * is considered as the transaction hash, and is used to look up the status of a
 * submitted transaction.
 * @param accountTransaction the transaction to serialize
 * @param signatures signatures on the signed digest of the transaction
 * @returns the serialization of the account transaction, which is used to calculate the transaction hash
 */
export declare function serializeAccountTransaction(accountTransaction: AccountTransaction, signatures: AccountTransactionSignature): Buffer;
/**
 * Gets the transaction hash that is used to look up the status of a transaction.
 * @param accountTransaction the transaction to hash
 * @param signatures the signatures that will also be part of the hash
 * @returns the sha256 hash of the serialized block item kind, signatures, header, type and payload
 */
export declare function getAccountTransactionHash(accountTransaction: AccountTransaction, signatures: AccountTransactionSignature): string;
/**
 * Returns the digest of the transaction that has to be signed.
 * @param accountTransaction the transaction to hash
 * @param signatureCount number of expected signatures
 * @returns the sha256 hash on the serialized header, type and payload
 */
export declare function getAccountTransactionSignDigest(accountTransaction: AccountTransaction, signatureCount?: bigint): Buffer;
/**
 * Serializes an account transaction so that it is ready for being submitted
 * to the node. This consists of the standard serialization of an account transaction
 * prefixed by a version byte.
 * @param accountTransaction the transaction to serialize
 * @param signatures the signatures on the hash of the account transaction
 * @returns the serialization of the account transaction ready for being submitted to a node
 */
export declare function serializeAccountTransactionForSubmission(accountTransaction: AccountTransaction, signatures: AccountTransactionSignature): Buffer;
/**
 * Serializes a signed credential used as part of an update credentials account
 * transaction.
 * @param credential the already signed credential deployment information
 * @returns the serialization of the signed credential
 */
export declare function serializeCredentialDeploymentInfo(credential: CredentialDeploymentInfo): Buffer;
/**
 * Returns the digest to be signed for a credential that has been generated for
 * deployment to an existing account.
 * @param unsignedCredentialDeploymentInfo the credential information to be deployed to an existing account
 * @returns the sha256 of the serialization of the unsigned credential
 */
export declare function getCredentialForExistingAccountSignDigest(unsignedCredentialDeploymentInfo: UnsignedCredentialDeploymentInformation, address: AccountAddress): Buffer;
/**
 * Returns the digest of the credential deployment transaction that has to be signed.
 * @param credentialDeployment the credential deployment transaction
 * @returns the sha256 of the serialized unsigned credential deployment information
 */
export declare function getCredentialDeploymentSignDigest(credentialDeployment: CredentialDeploymentDetails): Buffer;
/**
 * Gets the transaction hash that is used to look up the status of a credential
 * deployment transaction.
 * @param credentialDeployment the transaction to hash
 * @param signatures the signatures that will also be part of the hash
 * @returns the sha256 hash of the serialized block item kind, signatures, and credential deployment transaction
 */
export declare function getCredentialDeploymentTransactionHash(credentialDeployment: CredentialDeploymentDetails, signatures: string[]): string;
/**
 * Serializes a credential deployment transaction of a new account, so that it is ready for being
 * submitted to the node.
 * @param credentialDeployment the credenetial deployment transaction
 * @param signatures the signatures on the hash of unsigned credential deployment information
 * @returns the serialization of the credential deployment transaction ready for being submitted to a node
 */
export declare function serializeCredentialDeploymentTransactionForSubmission(credentialDeployment: CredentialDeploymentDetails, signatures: string[]): Buffer;
/**
 * @param contractName name of the contract that the init contract transaction will initialize
 * @param parameters the parameters to be serialized. Should correspond to the JSON representation.
 * @param rawSchema buffer for the schema of a module that contains the contract
 * @param schemaVersion the version of the schema provided
 * @returns serialized buffer of init contract parameters
 */
export declare function serializeInitContractParameters(contractName: string, parameters: any, rawSchema: Buffer, schemaVersion?: SchemaVersion): Buffer;
/**
 * @param contractName name of the contract that the update contract transaction will update
 * @param receiveFunctionName name of function that the update contract transaction will invoke
 * @param parameters the parameters to be serialized. Should correspond to the JSON representation.
 * @param rawSchema buffer for the schema of a module that contains the contract
 * @param schemaVersion the version of the schema provided
 * @returns serialized buffer of update contract parameters
 */
export declare function serializeUpdateContractParameters(contractName: string, receiveFunctionName: string, parameters: any, rawSchema: Buffer, schemaVersion?: SchemaVersion): Buffer;
/**
 * Given a value for a smart contract type, and the raw schema for that type, serialize the value into binary format.
 * @param value the value that should be serialized. Should correspond to the JSON representation
 * @param rawSchema the schema for the type that the given value should be serialized as
 * @returns serialized buffer of the value
 */
export declare function serializeTypeValue(value: any, rawSchema: Buffer): Buffer;
export declare function serializeSignedCredentialDeploymentDetailsForSubmission(credentialDetails: SignedCredentialDeploymentDetails): Buffer;
export declare function getSignedCredentialDeploymentTransactionHash(credentialDetails: SignedCredentialDeploymentDetails): string;
