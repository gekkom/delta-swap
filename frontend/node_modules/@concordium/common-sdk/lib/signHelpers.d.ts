import { AccountInfo, AccountTransaction, AccountTransactionSignature } from './types';
import { Buffer } from 'buffer/';
import { AccountAddress } from './types/accountAddress';
export interface AccountSigner {
    sign(digest: Buffer): Promise<AccountTransactionSignature>;
    getSignatureCount(): bigint;
}
/**
 * Creates a signer for an account which uses the first credential's first keypair.
 * Note that if the account has a threshold > 1 or the first credentials has a threshold > 1, the transaction signed using this will fail.
 * @param privateKey the ed25519 private key in HEX format. (First credential's first keypair's private key)
 */
export declare function buildBasicAccountSigner(privateKey: string): AccountSigner;
/**
 * Helper function to sign an AccountTransaction.
 * @param transaction the account transaction to sign
 * @param signer An object that handles the keys of the account, and performs the actual signing.
 */
export declare function signTransaction(transaction: AccountTransaction, signer: AccountSigner): Promise<AccountTransactionSignature>;
/**
 * Helper function to sign a message.
 * Note that this function prepends the string "MyGoodPrepend" to ensure that the message is not a transaction.
 * Note that the current prepend is temporary and will later be replaced.
 * @param message the message to sign, assumed to be utf8 encoded.
 * @param signer An object that handles the keys of the account, and performs the actual signing.
 */
export declare function signMessage(account: AccountAddress, message: string, signer: AccountSigner): Promise<AccountTransactionSignature>;
/**
 * Helper function to verify a signed message.
 * @param message the message to sign, assumed to be utf8 encoded.
 * @param signature the signature of a message, from a specific account.
 * @param accountInfo the address and credentials of the account
 */
export declare function verifyMessageSignature(message: string, signature: AccountTransactionSignature, accountInfo: Pick<AccountInfo, 'accountThreshold' | 'accountCredentials' | 'accountAddress'>): Promise<boolean>;
