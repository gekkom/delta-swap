import { AccountTransactionSignature } from './types';
/**
 * Replaces a string in a JSON string with the same string as a
 * number, i.e. removing quotes (") prior to and after the string. This
 * is needed as the default JSON stringify cannot serialize BigInts as numbers.
 * So one can turn them into strings, stringify the structure, and then use this function
 * to make those fields into JSON numbers.
 * @param jsonStruct the JSON structure as a string
 * @param keys the keys where the strings has to be unquoted
 * @returns the same JSON string where the strings at the supplied keys are unquoted
 */
export declare function stringToInt(jsonStruct: string, keys: string[]): string;
/**
 * A transformer that converts all the values provided as keys to
 * string values.
 * @param json the json to transform
 * @param bigIntPropertyKeys the keys in the json that must be converted to strings
 * @returns the transformed json where numbers have been replaced with strings
 */
export declare function intToStringTransformer(bigIntPropertyKeys: string[]): (json: string) => string;
/**
 * Builds a JSON.parse() reviver function used to parse dates and big integers.
 * @param datePropertyKeys the JSON keys that must be parsed as dates
 * @param bigIntPropertyKeys the JSON keys that must be parsed as big integers
 * @returns a reviver function that handles dates and big integers
 */
export declare function buildJsonResponseReviver<T>(datePropertyKeys: (keyof T)[], bigIntPropertyKeys: (keyof T)[]): (key: string, value: any) => any;
/**
 * Checks if the input string is a valid hexadecimal string.
 * @param str the string to check for hexadecimal
 */
export declare function isHex(str: string): boolean;
/**
 * Checks whether the input string looks to be a valid hash,
 * i.e. it has length 64 and consists of hexadecimal characters.
 * @param hash the string to check
 * @returns false if the string cannot be a valid hash, otherwise true
 */
export declare function isValidHash(hash: string): boolean;
/**
 * Counts the total number of signatures.
 * @param accountSignatures the signature structure to count
 */
export declare function countSignatures(accountSignatures: AccountTransactionSignature): bigint;
/**
 * Convert a Date to seconds since epoch.
 */
export declare function secondsSinceEpoch(date: Date): bigint;
