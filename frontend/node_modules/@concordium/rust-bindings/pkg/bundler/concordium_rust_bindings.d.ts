/* tslint:disable */
/* eslint-disable */
/**
* @param {string} input
* @returns {string}
*/
export function generateUnsignedCredential(input: string): string;
/**
* @param {any} signatures
* @param {string} unsigned_info
* @param {BigInt} expiry
* @returns {string}
*/
export function getDeploymentDetails(signatures: any, unsigned_info: string, expiry: BigInt): string;
/**
* @param {any} signatures
* @param {string} unsigned_info
* @returns {string}
*/
export function getDeploymentInfo(signatures: any, unsigned_info: string): string;
/**
* @param {string} contract_name
* @param {string} state_bytes
* @param {string} schema
* @returns {string}
*/
export function deserializeState(contract_name: string, state_bytes: string, schema: string): string;
/**
* @param {string} serialized
* @returns {string}
*/
export function deserializeCredentialDeployment(serialized: string): string;
/**
* @param {string} return_value_bytes
* @param {string} module_schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function deserializeReceiveReturnValue(return_value_bytes: string, module_schema: string, contract_name: string, function_name: string, schema_version?: number): string;
/**
* @param {string} error_bytes
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @returns {string}
*/
export function deserializeReceiveError(error_bytes: string, schema: string, contract_name: string, function_name: string): string;
/**
* @param {string} error_bytes
* @param {string} schema
* @param {string} contract_name
* @returns {string}
*/
export function deserializeInitError(error_bytes: string, schema: string, contract_name: string): string;
/**
* @param {string} parameters
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function serializeReceiveContractParameters(parameters: string, schema: string, contract_name: string, function_name: string, schema_version?: number): string;
/**
* @param {string} parameters
* @param {string} schema
* @param {string} contract_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function serializeInitContractParameters(parameters: string, schema: string, contract_name: string, schema_version?: number): string;
/**
* @param {string} schema
* @param {string} contract_name
* @param {string} function_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function getReceiveContractParameterSchema(schema: string, contract_name: string, function_name: string, schema_version?: number): string;
/**
* @param {string} schema
* @param {string} contract_name
* @param {number | undefined} schema_version
* @returns {string}
*/
export function getInitContractParameterSchema(schema: string, contract_name: string, schema_version?: number): string;
/**
* @param {string} value
* @param {string} value_type
* @returns {string}
*/
export function serializeTypeValue(value: string, value_type: string): string;
/**
* @param {string} input
* @returns {string}
*/
export function createIdRequestV1(input: string): string;
/**
* @param {string} input
* @returns {string}
*/
export function createIdentityRecoveryRequest(input: string): string;
/**
* @param {string} raw_input
* @returns {string}
*/
export function createCredentialV1(raw_input: string): string;
/**
* @param {string} raw_input
* @returns {string}
*/
export function createIdProof(raw_input: string): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @param {number} credential_counter
* @returns {string}
*/
export function getAccountSigningKey(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number, credential_counter: number): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @param {number} credential_counter
* @returns {string}
*/
export function getAccountPublicKey(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number, credential_counter: number): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @param {number} credential_counter
* @param {string} raw_on_chain_commitment_key
* @returns {string}
*/
export function getCredentialId(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number, credential_counter: number, raw_on_chain_commitment_key: string): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @returns {string}
*/
export function getPrfKey(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @returns {string}
*/
export function getIdCredSec(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @returns {string}
*/
export function getSignatureBlindingRandomness(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number): string;
/**
* @param {string} seed_as_hex
* @param {string} raw_net
* @param {number} identity_provider_index
* @param {number} identity_index
* @param {number} credential_counter
* @param {number} attribute
* @returns {string}
*/
export function getAttributeCommitmentRandomness(seed_as_hex: string, raw_net: string, identity_provider_index: number, identity_index: number, credential_counter: number, attribute: number): string;

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly generateUnsignedCredential: (a: number, b: number, c: number) => void;
  readonly getDeploymentDetails: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly getDeploymentInfo: (a: number, b: number, c: number, d: number) => void;
  readonly deserializeState: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly deserializeCredentialDeployment: (a: number, b: number, c: number) => void;
  readonly deserializeReceiveReturnValue: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly deserializeReceiveError: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly deserializeInitError: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly serializeReceiveContractParameters: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly serializeInitContractParameters: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly getReceiveContractParameterSchema: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly getInitContractParameterSchema: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly serializeTypeValue: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly createIdRequestV1: (a: number, b: number, c: number) => void;
  readonly createIdentityRecoveryRequest: (a: number, b: number, c: number) => void;
  readonly createCredentialV1: (a: number, b: number, c: number) => void;
  readonly createIdProof: (a: number, b: number, c: number) => void;
  readonly getAccountSigningKey: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly getAccountPublicKey: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly getCredentialId: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly getPrfKey: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly getIdCredSec: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly getSignatureBlindingRandomness: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly getAttributeCommitmentRandomness: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly verify_initial_cdi_ffi: (a: number, b: number, c: number, d: number) => number;
  readonly verify_cdi_ffi: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly pedersen_key_gen: () => number;
  readonly ip_info_ip_identity: (a: number) => number;
  readonly dummy_generate_global_context: () => number;
  readonly ar_info_ar_identity: (a: number) => number;
  readonly ar_info_name: (a: number, b: number) => number;
  readonly ar_info_url: (a: number, b: number) => number;
  readonly ar_info_description: (a: number, b: number) => number;
  readonly ar_info_public_key: (a: number, b: number) => number;
  readonly ip_info_name: (a: number, b: number) => number;
  readonly ip_info_url: (a: number, b: number) => number;
  readonly ip_info_description: (a: number, b: number) => number;
  readonly ip_info_verify_key: (a: number, b: number) => number;
  readonly ip_info_cdi_verify_key: (a: number, b: number) => number;
  readonly pedersen_key_from_bytes: (a: number, b: number) => number;
  readonly pedersen_key_to_bytes: (a: number, b: number) => number;
  readonly pedersen_key_free: (a: number) => void;
  readonly ps_sig_key_from_bytes: (a: number, b: number) => number;
  readonly ps_sig_key_to_bytes: (a: number, b: number) => number;
  readonly ps_sig_key_free: (a: number) => void;
  readonly ps_sig_key_gen: (a: number) => number;
  readonly ip_info_free: (a: number) => void;
  readonly ip_info_from_bytes: (a: number, b: number) => number;
  readonly ip_info_to_bytes: (a: number, b: number) => number;
  readonly ip_info_from_json: (a: number, b: number) => number;
  readonly ip_info_to_json: (a: number, b: number) => number;
  readonly global_context_free: (a: number) => void;
  readonly global_context_from_bytes: (a: number, b: number) => number;
  readonly global_context_to_bytes: (a: number, b: number) => number;
  readonly global_context_from_json: (a: number, b: number) => number;
  readonly global_context_to_json: (a: number, b: number) => number;
  readonly ar_info_free: (a: number) => void;
  readonly ar_info_from_bytes: (a: number, b: number) => number;
  readonly ar_info_to_bytes: (a: number, b: number) => number;
  readonly ar_info_from_json: (a: number, b: number) => number;
  readonly ar_info_to_json: (a: number, b: number) => number;
  readonly free_array_len: (a: number, b: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
