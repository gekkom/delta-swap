/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function generateUnsignedCredential(a: number, b: number, c: number): void;
export function getDeploymentDetails(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function getDeploymentInfo(a: number, b: number, c: number, d: number): void;
export function deserializeState(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function deserializeCredentialDeployment(a: number, b: number, c: number): void;
export function deserializeReceiveReturnValue(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function deserializeReceiveError(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function deserializeInitError(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function serializeReceiveContractParameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function serializeInitContractParameters(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getReceiveContractParameterSchema(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getInitContractParameterSchema(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function serializeTypeValue(a: number, b: number, c: number, d: number, e: number): void;
export function createIdRequestV1(a: number, b: number, c: number): void;
export function createIdentityRecoveryRequest(a: number, b: number, c: number): void;
export function createCredentialV1(a: number, b: number, c: number): void;
export function createIdProof(a: number, b: number, c: number): void;
export function getAccountSigningKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getAccountPublicKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function getCredentialId(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function getPrfKey(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getIdCredSec(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getSignatureBlindingRandomness(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getAttributeCommitmentRandomness(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function verify_initial_cdi_ffi(a: number, b: number, c: number, d: number): number;
export function verify_cdi_ffi(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function pedersen_key_gen(): number;
export function ip_info_ip_identity(a: number): number;
export function dummy_generate_global_context(): number;
export function ar_info_ar_identity(a: number): number;
export function ar_info_name(a: number, b: number): number;
export function ar_info_url(a: number, b: number): number;
export function ar_info_description(a: number, b: number): number;
export function ar_info_public_key(a: number, b: number): number;
export function ip_info_name(a: number, b: number): number;
export function ip_info_url(a: number, b: number): number;
export function ip_info_description(a: number, b: number): number;
export function ip_info_verify_key(a: number, b: number): number;
export function ip_info_cdi_verify_key(a: number, b: number): number;
export function pedersen_key_from_bytes(a: number, b: number): number;
export function pedersen_key_to_bytes(a: number, b: number): number;
export function pedersen_key_free(a: number): void;
export function ps_sig_key_from_bytes(a: number, b: number): number;
export function ps_sig_key_to_bytes(a: number, b: number): number;
export function ps_sig_key_free(a: number): void;
export function ps_sig_key_gen(a: number): number;
export function ip_info_free(a: number): void;
export function ip_info_from_bytes(a: number, b: number): number;
export function ip_info_to_bytes(a: number, b: number): number;
export function ip_info_from_json(a: number, b: number): number;
export function ip_info_to_json(a: number, b: number): number;
export function global_context_free(a: number): void;
export function global_context_from_bytes(a: number, b: number): number;
export function global_context_to_bytes(a: number, b: number): number;
export function global_context_from_json(a: number, b: number): number;
export function global_context_to_json(a: number, b: number): number;
export function ar_info_free(a: number): void;
export function ar_info_from_bytes(a: number, b: number): number;
export function ar_info_to_bytes(a: number, b: number): number;
export function ar_info_from_json(a: number, b: number): number;
export function ar_info_to_json(a: number, b: number): number;
export function free_array_len(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
