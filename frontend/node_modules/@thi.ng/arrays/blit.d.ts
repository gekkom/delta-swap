import type { TypedArray } from "@thi.ng/api";
/**
 * Selectively copies all non-`mask` values from `src` into `dest` starting from
 * destination position `dx`. Returns `dest`.
 *
 * @remarks
 * Where `src` values are the same as `mask`, the corresponding `dest` values
 * will be left unchanged. Performs region clipping, i.e. `dx` can be outside
 * the [0..dest.length) interval.
 *
 * @example
 * ```ts
 * blit1d(
 *    // dest array
 *    [1, 1, 1, 1, 1, 1, 1, 1, 1],
 *    // paste from index 2
 *    2,
 *    // source array
 *    [2, 3, 2, 3, 2],
 *    // mask value
 *    3
 * )
 * //[1, 1, 2, 1, 2, 1, 2, 1, 1]
 * ```
 *
 * @param dest
 * @param src
 * @param dx
 * @param mask
 */
export declare function blit1d<T extends TypedArray>(dest: T, dx: number, src: ArrayLike<number>, mask: number): T;
export declare function blit1d<T>(dest: T[], dx: number, src: ArrayLike<T>, mask: T): T[];
/**
 * 2D version of {@link blit1d} (also with region clipping). Positions and sizes
 * are given as 2D vectors.
 *
 * @param dest
 * @param dpos
 * @param dsize
 * @param src
 * @param ssize
 * @param mask
 */
export declare function blit2d<T extends TypedArray>(dest: T, dpos: ArrayLike<number>, dsize: ArrayLike<number>, src: ArrayLike<number>, ssize: ArrayLike<number>, mask: number): T;
export declare function blit2d<T>(dest: T[], dpos: ArrayLike<number>, dsize: ArrayLike<number>, src: ArrayLike<T>, ssize: ArrayLike<number>, mask: T): T[];
//# sourceMappingURL=blit.d.ts.map