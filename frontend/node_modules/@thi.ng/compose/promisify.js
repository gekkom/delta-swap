/**
 * Takes a function accepting a NodeJS-like callback w/ (error, result)
 * args and converts it into a Promise, e.g. for use in async contexts.
 *
 * @remarks
 * The constructed promise calls the given function with a custom
 * callback, which then either resolves or rejects the promise.
 *
 * @example
 * ```ts
 * (async () => {
 *    const body = await promisify(partial(fs.readFile, "foo.txt"));
 *    console.log(body.toString());
 * })();
 * ```
 *
 * @param fn - function accepting a callback
 */
export const promisify = (fn) => new Promise((resolve, reject) => fn((err, result) => (err != null ? reject(err) : resolve(result))));
