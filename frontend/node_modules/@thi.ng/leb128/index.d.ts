/**
 * Encodes signed integer `x` into LEB128 varint format and returns
 * encoded bytes.
 *
 * @param x -
 */
export declare const encodeSLEB128: (x: bigint | number) => Uint8Array;
/**
 * Takes Uint8Array with LEB128 encoded signed varint and an optional
 * start index to decode from. Returns 2-tuple of decoded value and
 * number of bytes consumed. Consumes up to 10 bytes from `src`.
 *
 * @param src -
 * @param idx -
 */
export declare const decodeSLEB128: (src: Uint8Array, idx?: number) => [bigint, number];
/**
 * Encodes unsigned integer `x` into LEB128 varint format and returns
 * encoded bytes. Values < 0 will be encoded as zero.
 *
 * @param x -
 */
export declare const encodeULEB128: (x: bigint | number) => Uint8Array;
/**
 * Takes Uint8Array with LEB128 encoded unsigned varint and an optional
 * start index to decode from. Returns 2-tuple of decoded value and
 * number of bytes consumed. Consumes up to 10 bytes from `src`.
 *
 * @param src -
 * @param idx -
 */
export declare const decodeULEB128: (src: Uint8Array, idx?: number) => [bigint, number];
//# sourceMappingURL=index.d.ts.map