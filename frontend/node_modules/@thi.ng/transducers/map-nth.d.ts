import type { Fn } from "@thi.ng/api";
import type { Transducer } from "./api.js";
/**
 * Transducer. Similar to {@link map}, but only transforms every `n`-th input
 * value and passes intermediate values unchanged downstream.
 *
 * @remarks
 * The optional `offset` arg can be used to adjust the number of inputs before
 * the first transformation occurs (default 0).
 *
 * @example
 * ```ts
 * [...mapNth(3, (x) => x * 10, range(1,10))]
 * // [ 10, 2, 3, 40, 5, 6, 70, 8, 9 ]
 *
 * // with offset
 * [...mapNth(3, 5, (x) => x * 10, range(1,10))]
 * // [ 1, 2, 3, 4, 5, 60, 7, 8, 90 ]
 * ```
 *
 * @param n - step size
 * @param fn - transformation function
 */
export declare function mapNth<A, B>(n: number, fn: Fn<A, B>): Transducer<A, A | B>;
export declare function mapNth<A, B>(n: number, offset: number, fn: Fn<A, B>): Transducer<A, A | B>;
export declare function mapNth<A, B>(n: number, fn: Fn<A, B>, src: Iterable<A>): IterableIterator<A | B>;
export declare function mapNth<A, B>(n: number, offset: number, fn: Fn<A, B>, src: Iterable<A>): IterableIterator<A | B>;
//# sourceMappingURL=map-nth.d.ts.map