import type { IObjectOf } from "@thi.ng/api";
import type { Reducer, Transducer, TxLike } from "./api.js";
/**
 * Transducer. Similar to (and building on) {@link multiplex}, but takes an
 * object of transducers and produces a result object for each input.
 *
 * @example
 * ```ts
 * [...multiplexObj(
 *   {
 *     initial: map(x => x.charAt(0)),
 *     upper:   map(x => x.toUpperCase()),
 *     length:  map(x => x.length)
 *   },
 *   ["Alice", "Bob", "Charlie", "Andy"]
 * )]
 * // [ { length: 5, upper: 'ALICE', initial: 'A' },
 * //   { length: 3, upper: 'BOB', initial: 'B' },
 * //   { length: 7, upper: 'CHARLIE', initial: 'C' },
 * //   { length: 4, upper: 'ANDY', initial: 'A' } ]
 * ```
 *
 * @param xforms - object of transducers
 * @param rfn -
 * @param src -
 */
export declare function multiplexObj<A, B>(xforms: IObjectOf<TxLike<A, any>>, rfn?: Reducer<B, [PropertyKey, any]>): Transducer<A, B>;
export declare function multiplexObj<A, B>(xforms: IObjectOf<TxLike<A, any>>, src: Iterable<A>): IterableIterator<B>;
export declare function multiplexObj<A, B>(xforms: IObjectOf<TxLike<A, any>>, rfn: Reducer<B, [PropertyKey, any]>, src: Iterable<A>): IterableIterator<B>;
//# sourceMappingURL=multiplex-obj.d.ts.map