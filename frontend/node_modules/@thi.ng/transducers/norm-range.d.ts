/**
 * Yields sequence of `n+1` monotonically increasing numbers in the
 * closed interval (0.0 .. 1.0). If `n <= 0`, yields nothing.
 *
 * @example
 * ```ts
 * [...normRange(4)]
 * // [0, 0.25, 0.5, 0.75, 1.0]
 * ```
 *
 * @param n - number of steps
 * @param includeLast - include last value (i.e. `1.0`)
 */
export declare function normRange(n: number, includeLast?: boolean): IterableIterator<number>;
/**
 * 2D version of {@link normRange} in Y-major order (i.e. X is inner loop).
 *
 * @param nx -
 * @param ny -
 * @param includeLastX -
 * @param includeLastY -
 */
export declare function normRange2d(nx: number, ny: number, includeLastX?: boolean, includeLastY?: boolean): Generator<number[], void, undefined>;
/**
 * 3D version of {@link normRange} in Z-major order (i.e. X being innermost
 * loop).
 *
 * @param nx -
 * @param ny -
 * @param includeLastX -
 * @param includeLastY -
 */
export declare function normRange3d(nx: number, ny: number, nz: number, includeLastX?: boolean, includeLastY?: boolean, includeLastZ?: boolean): Generator<number[], void, undefined>;
//# sourceMappingURL=norm-range.d.ts.map